openapi: 3.0.0
info:
  title: UNIMIB Modules
  description: UNIMIB Modules
  version: 0.4.1
servers:
  - url: http://unimibquestionari-env.eba-3behr9mi.eu-central-1.elasticbeanstalk.com/api
    description: UNIMIB Modules server
paths:
  /getUser/{id}:
    get:
      summary: Returns the User associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: User not found.
        '200':
          description: User with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /getSurveysCreated:
    get:
      summary: Gets the surveys created by the user identified by the username.
      parameters:
        - name: username
          in: query
          description: the username of a user
          schema:
            type: string
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Survey not found.
        '200':
          description: Surveys created by the user identified with username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /logInUser:
    post:
      summary: Logs the User into the website if the combination of username and password match.
      requestBody:
        required: true
        description: the DTO of a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '500':
          description: Server Error.
        '404':
          description: User not found.
        '401':
          description: User not authorized.
        '200':
          content:
            application/json:
              schema:
                type: string
          description: User authorized.
  /signUpUser:
    post:
      summary: Create a new User.
      requestBody:
        required: true
        description: the DTO of a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '500':
          description: Server Error.
        '400':
          description: Username already existing!
        '200':
          description: User created.
          content:
            application/json:
              schema:
                type: string
  /findSurvey/:
    get:
      summary: Returns the survey associated with the given id.
      parameters:
        - name: id
          in: query
          description: The id of the Survey.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Survey with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '404':
            description: Survey not found.
  /findSurveyNoQuestion/{id}:
    get:
      summary: Returns the survey associated with the given id without its questions.
      parameters:
        - name: id
          in: path
          description: The id of the Survey.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Survey not found.
        '200':
          description: Survey with no questions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
  /findSurveyByText:
    get:
      summary: Gets all surveys in the database where text is contained in their name or ID
      parameters:
        - name: text
          in: query
          description: the text to be found in the name or id of the surveys
          required: true
          schema:
            type : string
      responses:
        '500':
          description: Server Error.
        '404':
          description: No surveys found.
        '200':
          description: Surveys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /findSurveyByTextNoQuestion:
    get:
      summary: Gets all surveys in the database where text is contained in their name or ID without their questions.
      parameters:
        - name: text
          in: query
          description: the text to be found in the name or id of the surveys
          required: true
          schema:
            type : string
      responses:
        '500':
          description: Server Error.
        '404':
          description: No Surveys found.
        '200':
          description: Surveys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /findSurveyByTextNoQuestionLazy:
    get:
      summary: Gets surveys in the database where text is contained in their name or ID without their questions and 
                limiting the result by limit. The search with start with the offset required.
      parameters:
        - name: text
          in: query
          description: the text to be found in the name or id of the surveys.
          required: true
          schema:
            type : string
        - name: offset
          in: query
          description: the offset to apply.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: limit
          in: query
          description: limit of results to send.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: No surveys found.
        '200':
          description: Surveys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /findAllSurveys:
    get:
      summary: Gets all the surveys in the database.
      responses:
        '500':
          description: Server Error.
        '404':
          description: No surveys found.
        '200':
          description: All Surveys in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /findAllSurveysNoQuestions:
    get:
      summary: Gets all the surveys in the database without their questions.
      responses:
        '500':
          description: Server Error.
        '404':
          description: No surveys found.
        '200':
          description: All Surveys in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /findAllSurveysNoQuestionLazy:
    get:
      summary: Gets surveys in the database without their questions limiting the result by limit. The search with start with the offset required.
      parameters:
        - name: offset
          in: query
          description: the offset to apply.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: limit
          in: query
          description: limit of results to send.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: No surveys found.
        '200':
          description: Surveys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSurveys'
  /addSurvey:
    post:
      summary: Creates a survey, with the given name and request's date-time, that is associated to the given user id
      requestBody:
        required: true
        description: the DTO of a survey
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Survey Created
  /modifySurvey:
    patch:
      summary: Modifies the survey associated with the given surveyDTO.
      requestBody:
        required: true
        description: the DTO of a survey
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Survey'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Survey Modified
  /deleteSurvey/{id}:
    delete:
      summary: Deletes the survey associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the survey that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Survey not found.
        '200':
          description: Survey deleted.
  /getQuestion/{id}:
    get:
      summary: Returns the Question associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the question
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: The Question identifid by Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
  /getQuestion:
    get:
      summary: Returns all the Questions in the database.
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: All Questions in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'                
  /getQuestionByUser/{id}:
    get:
      summary: Return all the questions of the user
      parameters:
        - name: id
          in: path
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: All the questions of the specified user in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'           
  /getQuestionByCategory/{id}:
    get:
      summary: Return all the questions with the specified category
      parameters:
        - name: id
          in: path
          description: The id of the category
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: All the questions with the specified category in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions' 
  /getQuestionByCategoryLazy:
    get:
      summary: Gets questions by category in the database without limiting the result by limit. The search with start with the offset required.
      parameters:
        - name: id
          in: path
          description: The id of the category
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: offset
          in: query
          description: the offset to apply.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: limit
          in: query
          description: limit of results to send.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: No questions found.
        '200':
          description: Questions by the category in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'
  /getQuestionByUserLazy:
    get:
      summary: Gets questions of the user in the database without limiting the result by limit. The search with start with the offset required.
      parameters:
        - name: id
          in: path
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: offset
          in: query
          description: the offset to apply.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: limit
          in: query
          description: limit of results to send.
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: No questions found.
        '200':
          description: Questions of the user in the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'
  /findQuestionsByText/{text}:
    get:
      summary: Returns the Question associated with the given id.
      parameters:
        - name: text
          in: path
          description: The text of the question to be found
          required: true
          schema:
            type : string
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
        '200':
          description: The Question that contains the text.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'
  /findQuestionForSurvey/{id}:
    get:
      summary: Finds the Questions associated to the survey with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Question not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '200':
          description: The Question used in the survey identifid by Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfQuestions'
  /getToken/{id}:
    get:
      summary: Returns a AWS token for the specified user
      parameters:
        - name: id
          in: path
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '404':
          description: Token not created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '200':
          description: The values of the AWS object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AWSToken'
  /addQuestion:
    post:
      summary: Creates a question, with the given text and id
      requestBody:
        required: true
        description: A QuestionDTO
        content:
          application/json:
            schema:
              $ref: '##/components/schemas/Question'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Question added.
  /modifyQuestion:
    patch:
      summary: Modifies the question's text associated with the given id.
      requestBody:
        required: true
        description: A QuestionDTO
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '500':
          description: Server Error.
        '200':
          description: Question added.
        '404':
          description: Question not found.
  /deleteQuestion/{id}:
    delete:
      summary: Deletes the question associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the question that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Question deleted.
        '404':
          description: Question not found.
  /findAnswer/{id}:
    get:
      summary: Finds the Answer associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answer associated with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
        '404':
          description: Answer not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
  /findSurveyAnswersForUser:
     get:
      summary: Finds all the Answer the User associated with userId has created for the Survey associated with surveyId.
      parameters:
        - name: surveyId
          in: query
          description: The id of the survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: userId
          in: query
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Answers the User associated with userId has created for the Survey associated with surveyId.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfAnswers'
        '404':
          description: Answer not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
  /addAnswer:
    post:
      summary: Adds an answer to the Unit Of Work.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /modifyAnswer:
    patch:
      summary: Adds an answer modification to the Unit Of Work.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /deleteAnswer/{id}:
    delete:
      summary: Adds an answer deletion to the Unit Of Work.
      parameters:
        - name: id
          in: path
          description: The id of the answer that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /saveSurveyAnswers:
    post:
      summary: Inserts the registered answers made by the user identified by userId on the survey identified by surveyId.
      parameters:
        - name: surveyId
          in: query
          description: The id of the survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: userId
          in: query
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /saveModifiedSurveyAnswers:
    post:
      summary: Modifies and deletes the registered answers made by the user identified by userId on the survey identified by surveyId.
      parameters:
        - name: surveyId
          in: path
          description: The id of the survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: userId
          in: query
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /findCloseEndedAnswer/{id}:
    get:
      summary: Finds the CloseEndedAnswer associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the close-ended answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseEndedAnswer'
        '404':
          description: Answer not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /cleanSurveyAnswers:
    post:
      summary: Cleans all the registered answers made by the user identified by <code>userId</code> on the survey identified by <code>surveyId</code>
      parameters:
        - name: surveyId
          in: path
          description: The id of the survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: userId
          in: query
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /addCloseEndedAnswer:
    post:
      summary: Creates a close-ended answer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloseEndedAnswer'
      responses:
        '201':
          description: Created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /modifyCloseEndedAnswer:
    patch:
      summary: Modifies a close-ended answer.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloseEndedAnswer'
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /deleteCloseEndedAnswer/{id}:
    delete:
      summary: Deletes the close-ended answer associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the answer that will be deleted
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '404':
          description: Not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
        '500':
          description: Generic server error.
  /generatePdf:
    get:
      summary: Create a pdf of the Answers in the survey by the user
      parameters:
        - name: surveyId
          in: query
          description: The id of the survey
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
        - name: userId
          in: query
          description: The id of the user
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: Pdf of the answers in the survey by the user
          content:
            application/pdf:
              schema:
                type : array
                items: 
                  type: string
                  format: byte                  
        '404':
          description: Answer not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
  /findCategory/{id}:
    get:
      summary: Gets the Category associated with the given id.
      parameters:
        - name: id
          in: path
          description: The id of the Close-ended answer
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
            maximum: 1
      responses:
        '500':
          description: Server Error.
        '200':
          description: The Category associated with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found.
  /findCategories:
     get:
      summary: Gets all the categories
      responses:
        '500':
          description: Server Error.
        '200':
          description: All Categories in the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCategory'
        '404':
          description: Category not found.
components:
  securitySchemes:
      BasicAuth:
        type: http
        scheme: basic
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          description: The username of the user
          example: JonDoe22
        email:
          type: string
          description: The email of the user
          example: john@johndoe.com
        password:
          type: string
          description: The password of the user
          example: CoolPassword22
        name:
          type: string
          description: The name of the user
          example: John
        surname:
          type: string
          description: The surname of the user
          example: Doe
      required:  
        - username
        - email
        - password
        - name
        - surname
    Survey:
      type: object
      properties:
        id:
          type: integer
          description: The id of the survey
          example: 1
        name:
          type: string
          description: The name of the survey
          example: Survey42
        questionDTOs:
          type: array
          items:
            properties:
              id:
                type: integer
                description: The id of the question
                example: 1
              text:
                type: string
                description: The text of the question
                example: What's your name?
      required:  
        - id
    Question:
      type: object
      properties:
        id:
          type: integer
          description: The id of the question
          example: 1
        text:
          type: string
          description: The text of the question
          example: What's your name?
      required:  
        - id
        - text
    Category:
      type: object
      properties:
        id:
          type: integer
          description: The id of the category
          example: 1
        name:
          type: string
          description: The name of the category
          example: Sport
      required:  
        - id
        - name
    Answer:
      type: object
      properties:
        id:
          type: integer
          description: The id of the answer
          example: 1
        answerText:
          type: string
          description: The text of the answer
          example: Dave
        userDTO:
          type: object
          properties:
            id:
              type: integer
              description: The id of the user who created this answer.
              example: 1
          description: The User who created this answer.
        surveyDTO:
          type: object
          properties:
            id:
              type: integer
              description: The id of the survey related to this answer
              example: 1
          description: The Survey related to this answer
        questionDTO:
          type: object
          properties:
            id:
              type: integer
              description: The id of the question related to this answer
              example: 1
          description: The Question related to this answer
        closeEndedAnswerDTOs:
          type: array
          items:
            properties:
              id:
                type: integer
                description: The id of the CloseEndedAnswer related to this answer
                example: 1
          description: The CloseEndedAnswer related to this answer
      required:  
        - id
        - userDTO
        - surveyDTO
        - questionDTO
    CloseEndedAnswer:
      type: object
      properties:
        id:
          type: integer
          description: The id of the answer
          example: 1
        text:
          type: string
          description: The text of the answer
          example: Red
        questionDTO:
          type: object
          properties:
            id:
              type: integer
              description: The id of the question related to this answer
              example: 1
          description: The text of the answer
      required:  
        - id
        - text
        - questionDTO
    ArrayOfSurveys:
      type: array
      items:
        $ref: '#/components/schemas/Survey'
    ArrayOfQuestions:
      type: array
      items:
        $ref: '#/components/schemas/Question'
    ArrayOfAnswers:
      type: array
      items:
        $ref: '#/components/schemas/Answer'
    ArrayOfCategory:
      type: array
      items:
        $ref: '#/components/schemas/Category'
security:
  - BasicAuth: []